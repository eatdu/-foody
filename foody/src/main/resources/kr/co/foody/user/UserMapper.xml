<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.foody.user.UserMapper">
	
	<!-- 인덱스로 하나의 행 가져오기 -->
	<select id="selectOne" parameterType="int" resultType="kr.co.foody.user.UserVO">
		SELECT * FROM user WHERE no = #{no}
	</select>
	
	<!-- 회원가입 -->
	<insert id="insert" parameterType="kr.co.foody.user.UserVO">
		INSERT INTO user (
			name, birth, nik_name, selfi, email, tel, pwd, zipcode, addr1, addr2, height, weight, activity, intro
		) VALUES (
			#{name}, #{birth}, #{nik_name}, #{selfi}, #{email}, #{tel}, #{pwd}, #{zipcode}, #{addr1}, #{addr2}, #{height}, #{weight}, #{activity}, #{intro}
		)
		<!-- 회원데이터 저장후 해당 no가져오기 -->
		<selectKey keyProperty="no" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<!-- 회원가입 스킵가능 페이지 -->
	<update id="insertAdd" parameterType="kr.co.foody.user.UserVO">
		UPDATE user SET selfi=#{selfi}, intro=#{intro}, height=#{height}, weight=#{weight}, activity=#{activity} WHERE no=#{no}
	</update>
	
	<!-- 이메일 찾기 -->
	<select id="findEmail" parameterType="kr.co.foody.user.UserVO" resultType="kr.co.foody.user.UserVO">
		SELECT * FROM user WHERE tel=#{tel} AND name=#{name}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="findPwd" parameterType="kr.co.foody.user.UserVO" resultType="kr.co.foody.user.UserVO">
		SELECT * FROM user WHERE email=#{email} AND tel=#{tel} AND name=#{name}
	</select>
	
	<!-- 비밀번호 업데이트 -->
	<update id="updateTempPwd" parameterType="kr.co.foody.user.UserVO">
		UPDATE user SET pwd=#{pwd} WHERE email=#{email} AND tel=#{tel} AND name=#{name}  
	</update>
	
	<!-- 로그인 체크 -->
	<select id="loginCheck" parameterType="kr.co.foody.user.UserVO" resultType="kr.co.foody.user.UserVO">
		SELECT * FROM user WHERE email=#{email} AND pwd=md5(#{pwd}) AND user.exit=0
	</select>
	
	<!-- 이메일 중복체크 -->
	<select id="emailDupCheck" parameterType="string" resultType="int">
		SELECT COUNT(*) FROM user WHERE email = #{email} AND user.exit=0
	</select>
	
	<!-- 닉네임 중복체크 -->
	<select id="nik_nameDupCheck" parameterType="string" resultType="int">
		SELECT COUNT(*) FROM user WHERE nik_name = #{nik_name} AND user.exit=0
	</select>
	
	<!-- 전화번호 중복체크 -->
	<select id="telDupCheck" parameterType="string" resultType="int">
		SELECT COUNT(*) FROM user WHERE tel = #{tel}
	</select>
	
	<!-- 알러지 항목 가져오기 -->
	<select id="getAllergy" resultType="kr.co.foody.user.UserVO">
		SELECT no AS allergy_no, allergy FROM allergy
	</select>
	
	<!-- 유저알러지 정보 입력 -->
	<insert id="userAllergy" parameterType="kr.co.foody.user.UserVO">
		INSERT INTO u_allergy (
			user_no, user_allergy
		) VALUES ( 
			#{no}, #{allergy_no}
		)
	</insert>
	
	<!-- 유저선호음식 정보 입력 -->
	<insert id="userPrefer" parameterType="kr.co.foody.user.UserVO">
		INSERT INTO prefer (
			user_no, prefer_food
		) VALUES ( 
			#{no}, #{prefer_no}
		)
	</insert>
	
	<!-- 회원의 알레르기, 선호음식 정보조회 -->
	
	<!-- 유저의 알레르기 no 출력 -->
	<select id="allergyNoList" parameterType="int" resultType="int">
		SELECT user_allergy 
		FROM u_allergy 
		WHERE user_no=#{no}
	</select>
	
	<!-- 유저의 알레르기 no 출력 -->
	<select id="preferNoList" parameterType="int" resultType="int">
		SELECT prefer_food 
		FROM prefer 
		WHERE user_no=#{no}
	</select>
	
	<!-- 유저의 알레르기 정보 출력 -->
	<select id="allergyList" parameterType="int" resultType="kr.co.foody.mypage.MypageVO">
		SELECT
			a.no AS allergy_no, allergy
		FROM allergy AS a JOIN u_allergy AS ua
		ON a.no = ua.user_allergy
		WHERE ua.user_no=${user_no}
	</select>
	
	<!-- 유저의 선호음식 출력 -->
 	<select id="preferList" parameterType="int" resultType="kr.co.foody.mypage.MypageVO">
		SELECT 
			<if test="prefer_food !=null">
				prefer_food 
			</if>
		FROM prefer 
		WHERE user_no=${user_no}
	</select>
	
	<!-- 회원정보 수정 -->
	
	<!-- 회원의 기본정보 수정 -->
	<update id="modifyUserInfo" parameterType="kr.co.foody.user.UserVO">
		UPDATE user SET
		 	<if test="selfi != null">
				selfi=#{selfi},	
			</if>
				nik_name=#{nik_name}, tel=#{tel}, zipcode=#{zipcode}, addr1=#{addr1}
				,addr2=#{addr2}, intro=#{intro}, height=#{height}, weight=#{weight}, activity=#{activity}
		WHERE no=#{no}
	</update>
	
	<!-- 유저가 가진 알러지의 no 받아오기 -->
	<select id="userAllergyNo" parameterType="int" resultType="kr.co.foody.mypage.MypageVO">
		SELECT no 
		FROM u_allergy 
		WHERE user_no=#{user_no}
	</select>
	
	<!-- 가져온 회원의 알러지 삭제 -->
	<delete id="userAllergyDelete" parameterType="int">
		DELETE 
		FROM u_allergy 
		WHERE user_no=#{user_no}
	</delete>
	
	<!-- 가져온 회원의 선호음식 삭제 -->	
	<delete id="userPreferDelete" parameterType="int">
		DELETE 
		FROM prefer 
		WHERE user_no=#{user_no}
	</delete>
	
	<!-- 회원탈퇴 -->
	<update id="userExit" parameterType="int">
		UPDATE user SET 
			user.print = 1, user.exit =1, user.exit_date=now()
		WHERE no=#{no}
	</update>
	
	
	<!-- 관리자페이지 필요데이터 -->
	
	<!-- 유저 전체 카운트(관리자) -->
	<select id="countAllUser" resultType="int">
		SELECT count(*) FROM user
	</select>
	
	<!-- 월별 신규 유저 카운트(관리자) -->
	<select id="countUserWithPeriod" resultType="map">
		select *
		from (
			select @ROWNUM := @ROWNUM + 1 AS rownum, a.*
			from (SELECT  DATE_FORMAT(regdate,'%Y-%m') month, COUNT(*) cnt
				FROM user
			GROUP BY month order by month desc) a , (select @rownum := 0) r
		) b
		where rownum between 1 and 5;
	</select>
	
	<select id="getUserTotalCount" resultType="int">
		select count(*) from user
	</select>

</mapper>





