<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.foody.recipe.RecipeMapper">
	
	
	<!-- 레시피 등록 -->
	<insert id="insert" parameterType="map">
		
		INSERT INTO recipe (
			user_no, name, intro, type, time, thumbnail, addedpicture1, addedpicture2, tip, serving, regdate
		) VALUES (
			#{user_no}, #{name}, #{intro}, #{type}, #{time}, #{thumbnail}, #{addedpicture1}, #{addedpicture2}, #{tip}, #{serving}, NOW()
		)
		
		<selectKey keyProperty="no" resultType="integer"  order="AFTER">
        	SELECT LAST_INSERT_ID();
		</selectKey>
	</insert>
	
	<!-- 레시피 과정 등록 -->
	<insert id="insert2" parameterType="map">
		INSERT INTO process (
			recipe_no, order_no, content, photo
		)values (
			#{no}, #{order_no}, #{content}, #{photo}
		)
	</insert>
	
	<!-- 레시피 재료 등록 -->
	<insert id ="insert3" parameterType="map">
		INSERT INTO ingre_recipe_map (
			recipe_no, ingredient_no, weight, quantity
		)values(
			#{no}, #{ingredient_no}, #{weight}, #{quantity}
		)
	</insert>
	
	<!-- 레시피 보여주기 -->
	<select id="view" parameterType="int" resultType="kr.co.foody.recipe.RecipeVO">
		select * from recipe where no=#{no}
	</select>
	
	<select id="userView" parameterType="int" resultType="map">
		select * from user where no=#{no}
	</select>
	
	<select id="processView" parameterType="int" resultType="map">
		select * from process where recipe_no=#{no}
	</select>
	
	<select id="ingredientView" parameterType="int" resultType="map">
		select * from (
			select *from ingre
		)a join(
			select * from ingre_recipe_map where recipe_no= #{no}
		)b
		on a.no = b.ingredient_no;
	</select>
	
	<!-- 조회수 올리기 -->
	<update id="updateRecipeViewCount" parameterType="int">
		update recipe set viewcount = viewcount+1 where no=#{no}
	</update>
	
	<!-- 조회시간 업데이트(조회) -->
	
	<!-- 조회시간 업데이트(1.업데이트) -->
	
	<!-- 조회시간 업데이트(2.인서트) -->
	
	<!-- 레시피no로 해당 레시피에 필요한 재료 리스트 조회하는 sql -->
	<select id='selectIngreList' parameterType="int" resultType="kr.co.foody.recipe.IngredientVO">
		SELECT
			map.no, map.quantity, map.weight, name, carbo, protein, fat, large_cate, print
		FROM
			ingre, (
			SELECT ingredient_no AS no, quantity, weight
			FROM ingre_recipe_map 
			WHERE recipe_no = #{no}
			) map
		WHERE
			ingre.no = map.no;
	</select>
	
	<!-- 레시피no로 해당 레시피 조리과정 리스트로 조회하는 sql -->
	<select id='selectProcessList' parameterType="int">
		
	</select>
	
	<!-- 조건없이 전체 조회 -->
	<select id="selectAll" resultType="kr.co.foody.recipe.RecipeVO">
		SELECT a.*
		FROM (
			SELECT @ROWNUM := @ROWNUM + 1 AS rownum, recipe.* 
			FROM recipe, (select @rownum := 0) b
			) a
		<!-- 페이징 처리
		WHERE
			rownum between #{startNo} and #{endNo}
		 -->
	</select>
	
	<!-- 재료 검색어로 ingre_no 리스트 가져오기 -->
	<select id='selectIngreNo' parameterType="string" resultType="int">
		SELECT no FROM ingre 
		WHERE name REGEXP ${str}
			OR detail REGEXP ${str}
	</select>
	
	<!-- 주어진 조건에서 갯수 카운트 -->
	<select id='countWithFilter' parameterType="map" resultType="int">
		SELECT count(*)
		FROM recipe, (
			SELECT a.rcpno
			<if test='allergyArr != null'>
				, sum(algF) algCnt
			</if>
			<if test='keywordArr != null'>
	        	, sum(keyF) keyCnt
	        </if>
	        <if test='ingreCateArr != null'>
	        	, sum(icateF) icateCnt
	        </if>
			FROM (
				SELECT map.recipe_no rcpno
				<if test='allergyArr != null'>
	 				, (ingre.allergy_no IN (
	 			<foreach collection="allergyArr" item="no" separator=",">
	 				#{no}
	 			</foreach>
	 				)) algF
	 			</if>
	 			<if test='keywordArr != null'>
	 				, (ingre.no IN (
	 			<foreach collection="keywordArr" item="no" separator=",">
	 				#{no}
	 			</foreach>
	 				)) keyF
	 			</if>
	 			<if test='ingreCateArr != null'>
	 				, (ingre.large_cate IN (
	 			<foreach collection="ingreCateArr" item="no" separator=",">
	 				#{no}
	 			</foreach>
	 				)) icateF
	 			</if>
				FROM ingre_recipe_map map, ingre
				WHERE ingre.no = map.ingredient_no
				) a
			GROUP BY rcpno
			) b
		WHERE b.rcpno = recipe.no
		<if test='rcpCateArr != null'>
			AND recipe.type IN (
		<foreach collection="rcpCateArr" item="no" separator=",">
			#{no}
		</foreach>
			)
		</if>
	    <if test='allergyArr != null'>
		    AND algCnt = 0
	    </if>
	    <if test='keywordArr != null'>
		    AND keyCnt > 0
	    </if>
	    <if test='ingreCateArr != null'>
		    AND icateCnt > 0
		</if>
		<if test='rKeyword != null'>
			AND name LIKE "%${rKeyword}%"
		</if>
	</select>
	
	<!-- 0. 재료 단어, 재료 분류, 음식 분류, 알러지 필터 모두 적용 -->
	<select id='selectWithFilter' parameterType="map" resultType="kr.co.foody.recipe.RecipeVO">
		SELECT *
		FROM 
			(
			SELECT @ROWNUM := @ROWNUM + 1 AS rownum, result.*
			FROM (select @rownum := 0) r, (
				SELECT recipe.*, IFNULL(bk.bmkCnt, 0) bookmark, IFNULL(s.star, 0) star,
					(SELECT count(*)
					 FROM comment
					 WHERE
					 	recipe.no = comment.board_no
					 	AND comment.tablename = 'recipe'
					) reply
				FROM recipe,
					(
					SELECT a.rcpno
					<if test='allergyArr != null'>
						, sum(algF) algCnt
					</if>
					<if test='keywordArr != null'>
			        	, sum(keyF) keyCnt
			        </if>
			        <if test='ingreCateArr != null'>
			        	, sum(icateF) icateCnt
			        </if>
					FROM 
						(
						SELECT map.recipe_no rcpno
						<if test='allergyArr != null'>
			 				, (ingre.allergy_no IN (
			 			<foreach collection="allergyArr" item="no" separator=",">
			 				#{no}
			 			</foreach>
			 				)) algF
			 			</if>
			 			<if test='keywordArr != null'>
			 				, (ingre.no IN (
			 			<foreach collection="keywordArr" item="no" separator=",">
			 				#{no}
			 			</foreach>
			 				)) keyF
			 			</if>
			 			<if test='ingreCateArr != null'>
			 				, (ingre.large_cate IN (
			 			<foreach collection="ingreCateArr" item="no" separator=",">
			 				#{no}
			 			</foreach>
			 				)) icateF
			 			</if>
						FROM ingre_recipe_map map, ingre
						WHERE ingre.no = map.ingredient_no
						) a
					GROUP BY rcpno
					) b
					LEFT JOIN (SELECT recipe_no, COUNT(*) bmkCnt
						FROM feedback
						WHERE bookmark = 1
						GROUP BY recipe_no) bk
						ON b.rcpno = bk.recipe_no
					LEFT JOIN (SELECT recipe_no, AVG(star) star
						FROM feedback
						WHERE star != -1
						GROUP BY recipe_no) s
						ON b.rcpno = s.recipe_no
				WHERE b.rcpno = recipe.no
				<if test='rcpCateArr != null'>
					AND recipe.type IN (
				<foreach collection="rcpCateArr" item="no" separator=",">
					#{no}
				</foreach>
					)
				</if>
			    <if test='allergyArr != null'>
				    AND algCnt = 0
			    </if>
			    <if test='keywordArr != null'>
				    AND keyCnt > 0
			    </if>
			    <if test='ingreCateArr != null'>
				    AND icateCnt > 0
				</if>
				<if test='rKeyword != null'>
					AND name LIKE "%${rKeyword}%"
				</if>
				ORDER BY 
					${orderBy} DESC
				) result
			) result2
		WHERE rownum BETWEEN #{startRno} AND #{endRno}
		ORDER BY rownum
	</select>
	
	<!-- 1. 재료분류, 키워드중 한가지 조건이 걸린 경우 + (재료분류 or 재료키워드), 요리분류 -->
	<select id='selectIngreOrKey' parameterType="map" resultType="kr.co.foody.recipe.RecipeVO">
		SELECT
			*
		FROM
			recipe, (
			SELECT
				map.recipe_no no, count(*) cnt, sum(algchk) algCnt
			FROM
				ingre_recipe_map map, (
					SELECT
						name, no ingre_no, 
						<if test='allergyArr != null'>
			 				(allergy_no IN (
			 			<foreach collection="allergyArr" item="no" separator=",">
			 				#{no}
			 			</foreach>
			 				)) algchk,
			 			</if>
						large_cate
					FROM
						ingre
		 			<where>
			 			<if test='keywordArr != null'>
			 				name IN (
			 			<foreach collection="keywordArr" item="name" separator=",">
			 				#{name}
			 			</foreach>
			 				)
			 			</if>
			 			<if test='ingreCateArr != null'>
			 				AND large_cate IN (
			 			<foreach collection="ingreCateArr" item="no" separator=",">
			 				#{no}
			 			</foreach>
			 				)
			 			</if>
			 			<if test='allergyArr != null'>
			 				OR allergy_no IN (
			 			<foreach collection="allergyArr" item="no" separator=",">
			 				#{no}
			 			</foreach>
			 				)
			 			</if>
		 			</where>
				) result
			WHERE
				result.ingre_no = map.ingredient_no
			GROUP BY
				map.recipe_no
			) li
		WHERE recipe.no = li.no
		<if test='rcpCateArr != null'>
			AND type IN (
		<foreach collection="rcpCateArr" item="no" separator=",">
			#{no}
		</foreach>
			)
		</if>
		<if test='allergyArr != null'>
			AND li.algCnt = 0
		</if>
		ORDER BY cnt DESC
	</select>
	
	<!-- 2. 요리분류 조건이 걸린 경우 -->
	<select id="selectR" parameterType="map" resultType="kr.co.foody.recipe.RecipeVO">
		SELECT * FROM recipe
		WHERE type IN (
			<foreach collection="rcpCateArr" item="no" separator=",">
				#{no}
			</foreach>
				)
	</select> 
	
	<!--  3. 추천 레시피 - 알러지 필터, 선호 음식 분류 -->
	
	<!-- 재료 검색어로 재료상세 리스트 및 no 조회하는 sql -->
	<select id="selectIngreDetail" parameterType="string" resultType="kr.co.foody.recipe.IngredientVO">
		SELECT * FROM ingre WHERE name = #{keyword} 
	</select>
	
	<!-- 재료 분류로 재료명 리스트 조회하는 sql -->
	<select id="selectIngreNameList" parameterType="int" resultType="string">
		SELECT distinct name FROM ingre
		WHERE large_cate = #{no} AND print = 0
		ORDER BY name
	</select>
	
	<!-- 재료 검색어로 재료명 리스트 조회하는 sql -->
	<select id='selectIngreNameList2' parameterType="string" resultType="string">
		SELECT DISTINCT name FROM ingre
		WHERE (name LIKE '%${keyword}%'
			OR detail LIKE '%${keyword}%')
			AND print = 0
	</select>
	
	<!-- 관리자 관련 -->
	
	<!-- 1. 총 레시피 개수 집계 -->
	<select id='count' parameterType="string" resultType='int'>
		SELECT COUNT(*) FROM recipe ${where}
	</select>
	
	<!-- 레시피 검색 결과 -->
	<select id='selectRcpAdmin' parameterType="map" resultType="map">
		SELECT *
		FROM
			(
			SELECT
				no, 
				(
				SELECT nik_name FROM user WHERE recipe.user_no = user.no
				) nikname, name title, type, regdate, adminchk, print
			FROM
				recipe
			) a
		<where>
			<if test='date != "all"'>
			regdate >= date_add(now(), interval -${date})	
			</if>
			AND (print = ${print})
			AND (adminchk = ${adminChk})
			
			AND ${type} like '%${keyword}%'
			
		</where>
		ORDER BY ${orderBy};
	</select>
	
	<!-- 샘플 데이터 생성용 -->
	<!-- 랜덤 회원정보 인서트 -->
	<insert id="insertRandomUser" parameterType="map">
		insert into user(email, nik_name, name, birth, tel, pwd, intro, height, weight)
		values (#{email}, #{nik_name}, #{name}, #{birth}, #{tel}, #{pwd}, #{intro}, #{height}, #{weight})
	</insert>
	
	<!-- 랜덤 회원 알러지 인서트 -->
	<insert id="insertAllergyUser" parameterType="map">
		insert into prefer(user_no, prefer_food)
		values (#{userNo}, #{preferFood})
	</insert>
	
	<!-- 랜덤 별점/찜 인서트 -->
	<insert id="insertFeedback" parameterType="map">
		insert into feedback(recipe_no, user_no, star, bookmark)
		values (#{rcpNo}, #{userNo}, #{star}, #{bmk})
	</insert>
	
	<!-- 랜덤 조회기록 인서트 -->
	<insert id="insertRecent" parameterType="map">
		insert into recent(recipe_no, user_no, regdate)
		values (#{recipe_no}, #{user_no}, (SELECT FROM_UNIXTIME(FLOOR(unix_timestamp('2022-08-21 00:00:00')+(RAND()*(unix_timestamp('2022-08-31 00:00:00')-unix_timestamp('2022-08-21 00:00:00')))))))
	</insert>
		
	<!-- 랜덤 가입일자 업데이트 -->
	<update id="randomReg" parameterType="int">
		update user set regdate = (
				SELECT FROM_UNIXTIME(FLOOR(unix_timestamp('2022-04-01 00:00:00')+(RAND()*(unix_timestamp('2022-08-31 00:00:00')-unix_timestamp('2022-04-01 00:00:00'))))) rand
				)
		where no = #{no};
	</update>
	
	<!-- 랜덤 레시피 작성자 업데이트 -->
	<update id="randomRcpUser" parameterType="map">
		update recipe set user_no = #{userNo}
		where no = #{no}
	</update>
</mapper>